/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LocationImageService } from "../locationImage.service";
import { LocationImageCreateInput } from "./LocationImageCreateInput";
import { LocationImage } from "./LocationImage";
import { LocationImageFindManyArgs } from "./LocationImageFindManyArgs";
import { LocationImageWhereUniqueInput } from "./LocationImageWhereUniqueInput";
import { LocationImageUpdateInput } from "./LocationImageUpdateInput";

export class LocationImageControllerBase {
  constructor(protected readonly service: LocationImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LocationImage })
  async createLocationImage(
    @common.Body() data: LocationImageCreateInput
  ): Promise<LocationImage> {
    return await this.service.createLocationImage({
      data: {
        ...data,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        isPrimary: true,

        location: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LocationImage] })
  @ApiNestedQuery(LocationImageFindManyArgs)
  async locationImages(
    @common.Req() request: Request
  ): Promise<LocationImage[]> {
    const args = plainToClass(LocationImageFindManyArgs, request.query);
    return this.service.locationImages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isPrimary: true,

        location: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LocationImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async locationImage(
    @common.Param() params: LocationImageWhereUniqueInput
  ): Promise<LocationImage | null> {
    const result = await this.service.locationImage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isPrimary: true,

        location: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LocationImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLocationImage(
    @common.Param() params: LocationImageWhereUniqueInput,
    @common.Body() data: LocationImageUpdateInput
  ): Promise<LocationImage | null> {
    try {
      return await this.service.updateLocationImage({
        where: params,
        data: {
          ...data,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          isPrimary: true,

          location: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LocationImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLocationImage(
    @common.Param() params: LocationImageWhereUniqueInput
  ): Promise<LocationImage | null> {
    try {
      return await this.service.deleteLocationImage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isPrimary: true,

          location: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
