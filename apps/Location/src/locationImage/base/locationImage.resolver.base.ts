/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LocationImage } from "./LocationImage";
import { LocationImageCountArgs } from "./LocationImageCountArgs";
import { LocationImageFindManyArgs } from "./LocationImageFindManyArgs";
import { LocationImageFindUniqueArgs } from "./LocationImageFindUniqueArgs";
import { CreateLocationImageArgs } from "./CreateLocationImageArgs";
import { UpdateLocationImageArgs } from "./UpdateLocationImageArgs";
import { DeleteLocationImageArgs } from "./DeleteLocationImageArgs";
import { Location } from "../../location/base/Location";
import { LocationImageService } from "../locationImage.service";
@graphql.Resolver(() => LocationImage)
export class LocationImageResolverBase {
  constructor(protected readonly service: LocationImageService) {}

  async _locationImagesMeta(
    @graphql.Args() args: LocationImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LocationImage])
  async locationImages(
    @graphql.Args() args: LocationImageFindManyArgs
  ): Promise<LocationImage[]> {
    return this.service.locationImages(args);
  }

  @graphql.Query(() => LocationImage, { nullable: true })
  async locationImage(
    @graphql.Args() args: LocationImageFindUniqueArgs
  ): Promise<LocationImage | null> {
    const result = await this.service.locationImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LocationImage)
  async createLocationImage(
    @graphql.Args() args: CreateLocationImageArgs
  ): Promise<LocationImage> {
    return await this.service.createLocationImage({
      ...args,
      data: {
        ...args.data,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LocationImage)
  async updateLocationImage(
    @graphql.Args() args: UpdateLocationImageArgs
  ): Promise<LocationImage | null> {
    try {
      return await this.service.updateLocationImage({
        ...args,
        data: {
          ...args.data,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LocationImage)
  async deleteLocationImage(
    @graphql.Args() args: DeleteLocationImageArgs
  ): Promise<LocationImage | null> {
    try {
      return await this.service.deleteLocationImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Location, {
    nullable: true,
    name: "location",
  })
  async getLocation(
    @graphql.Parent() parent: LocationImage
  ): Promise<Location | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
